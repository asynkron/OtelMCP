// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Asynkron.OtelReceiver.Data;

#nullable disable

namespace Asynkron.OtelReceiver.Migrations
{
    [DbContext(typeof(OtelReceiverContext))]
    [Migration("20240328140942_First")]
    partial class First
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Asynkron.OtelReceiver.Data.ComponentMetaData", b =>
                {
                    b.Property<string>("NamePath")
                        .HasColumnType("text");

                    b.Property<string>("Annotation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("NamePath");

                    b.ToTable("ComponentMetaData");
                });

            modelBuilder.Entity("Asynkron.OtelReceiver.Data.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string[]>("AttributeMap")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ObservedTimestamp")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Proto")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("RawBody")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("ResourceMap")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<byte>("SeverityNumber")
                        .HasColumnType("smallint");

                    b.Property<string>("SeverityText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpanId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.Property<string>("TraceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TraceId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Asynkron.OtelReceiver.Data.Span", b =>
                {
                    b.Property<string>("SpanId")
                        .HasColumnType("text");

                    b.Property<string[]>("AttributeMap")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<long>("EndTimestamp")
                        .HasColumnType("bigint");

                    b.Property<string[]>("Events")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("OperationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParentSpanId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Proto")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("StartTimestamp")
                        .HasColumnType("bigint");

                    b.Property<string>("TraceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SpanId");

                    b.HasIndex("SpanId");

                    b.HasIndex("TraceId");

                    b.ToTable("Spans");
                });

            modelBuilder.Entity("Asynkron.OtelReceiver.Data.SpanAttribute", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Key", "Value");

                    b.ToTable("SpanAttributes");
                });

            modelBuilder.Entity("Asynkron.OtelReceiver.Data.SpanName", b =>
                {
                    b.Property<string>("ServiceName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ServiceName", "Name");

                    b.ToTable("SpanNames");
                });

            modelBuilder.Entity("Asynkron.OtelReceiver.Data.UserSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("TimestampType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("UserSettings");
                });
#pragma warning restore 612, 618
        }
    }
}
